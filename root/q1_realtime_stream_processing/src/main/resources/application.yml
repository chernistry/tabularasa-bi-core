spring:
  application:
    name: tabularasa-bi-q1-stream-processing
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:simple}
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/tabularasadb}
    username: ${SPRING_DATASOURCE_USERNAME:tabulauser}
    password: ${SPRING_DATASOURCE_PASSWORD:tabulapass}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Optimize connection pool
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 10000
      idle-timeout: 300000
      max-lifetime: 600000
      auto-commit: true
      pool-name: HikariPool-Q1StreamProcessor
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:19092}
    consumer:
      group-id: q1_stream_consumer_group
      auto-offset-reset: earliest
      fetch-max-bytes: 5242880
      max-poll-records: 500
    producer:
      acks: all
      batch-size: 16384
      buffer-memory: 33554432
      compression-type: lz4

# Application
app:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:${spring.kafka.bootstrap-servers}}
    topics:
      ad-events: ad-events

# Settings for Spark
spark:
  app:
    name: tabularasa-bi-q1-spark-processor
  master: ${SPARK_MASTER:local[*]}
  driver:
    memory: ${SPARK_DRIVER_MEMORY:1g}
  executor:
    memory: ${SPARK_EXECUTOR_MEMORY:1g}
    cores: ${SPARK_EXECUTOR_CORES:2}
  default:
    parallelism: ${SPARK_DEFAULT_PARALLELISM:4}
  sql:
    shuffle:
      partitions: ${SPARK_SQL_SHUFFLE_PARTITIONS:4}
  streaming:
    checkpoint-location: ${SPARK_STREAMING_CHECKPOINT_LOCATION:/tmp/spark_checkpoints}

# Settings for logging
logging:
  level:
    root: INFO
    com.tabularasa: INFO
    org.apache.kafka: WARN
    org.apache.spark: WARN
    org.springframework: INFO
    org.springframework.kafka: INFO

# Settings for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

server:
  port: 8083
  shutdown: graceful 