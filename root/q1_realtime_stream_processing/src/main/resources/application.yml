spring:
  application:
    name: tabularasa-bi-q1-stream-processing
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:simple}
  datasource:
    url: jdbc:postgresql://localhost:5432/tabularasadb
    username: tabulauser
    password: tabulapass
    driver-class-name: org.postgresql.Driver
    hikari:
      # Optimize connection pool
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 30000
      connection-timeout: 20000
      max-lifetime: 1200000
  jpa:
    hibernate:
      ddl-auto: validate # Prevents automatic schema updates
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 50
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
    show-sql: false
  kafka:
    bootstrap-servers: localhost:19092
    consumer:
      group-id: q1_stream_consumer_group
      auto-offset-reset: earliest
      fetch-max-bytes: 5242880
      max-poll-records: 500
    producer:
      acks: all
      retries: 3
      batch-size: 16384
      buffer-memory: 33554432

# Application
app:
  kafka:
    bootstrap-servers: ${spring.kafka.bootstrap-servers}
    topics:
      ad-events: ad-events

# Settings for Spark
spark:
  app:
    name: TabularasaBIStreamProcessor
  master: local[2]
  driver:
    memory: 1g
  executor:
    memory: 1g
    cores: 1
  default:
    parallelism: 2
  sql:
    shuffle:
      partitions: 2
  streaming:
    checkpoint-location: /tmp/spark_checkpoints
    backpressure:
      enabled: true
    kafka:
      maxRatePerPartition: 100
    unpersist: true
  serializer: org.apache.spark.serializer.KryoSerializer
  kryo:
    registrator: com.tabularasa.bi.q1_realtime_stream_processing.serialization.KryoRegistrator

# Settings for logging
logging:
  level:
    root: INFO
    com.tabularasa: INFO
    org.apache.kafka: WARN
    org.apache.spark: WARN
    org.springframework: INFO
    org.springframework.kafka: INFO

# Settings for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

server:
  port: 8083
  shutdown: graceful 